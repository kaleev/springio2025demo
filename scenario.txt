TASK A – THE GREETING NEVER CHANGES
Goal: make the greeting on the “/” home page change each time you reload it.

1. Run the application by using the provided run configuration.
2. Open a browser at http://localhost:8080/ and reload the page a few times.  
   The greeting below the header always shows the same text.
3. Open HomeController and set a breakpoint on the line that calls  
   greetingResolver.resolveGreeting(…).
4. Reload the browser once more; execution should stop at the breakpoint.
5. While the program is paused, locate **greetingResolver** in the Debugger’s
   Variables pane. Determine which bean is actually injected.
6. Enable the bean that produces random greetings, then restart the application.
7. Reload the page a few times. The greeting should now be different on each
   reload.
8. Stop the debugger before moving on.

===============================================================================
TASK B – “ADD RANDOM CUSTOMER” HANGS, THEN DUPLICATES
There are two defects to fix:  
(1) the first click on “Add Random Customer” never returns because of a
    transaction hang;  
(2) after the hang is fixed, a second click fails due to a duplicate username.

PART 1 – INVESTIGATE THE HANG CAUSED BY NESTED TRANSACTIONS

1. Start the application (if it is not already running) and click
   “Add Random Customer” once. The browser keeps loading—the server thread
   is stuck.
2. Open **CustomerService** and set a breakpoint on the first line of
   createRandomCustomer(…).
3. Click “Add Random Customer” again. Execution stops at the breakpoint.
4. In the **Debugger** tool window inspect the thread and variables.
   Identify where the transaction was started.
5. Press **Resume** (F9).  
   After a short moment the breakpoint is hit a **second** time.  
   Inspect the variables again—you are now inside a new inner transaction
   waiting for a lock already held by the outer one, which explains the hang.
6. Navigate to the transaction source and fix the problem by  
   • removing the custom propagation setting from TransactionLevel5Service, and  
   • deleting the redundant createRandomCustomer() call in TransactionLevel4Service.
   Restart the application.
7. Click “Add Random Customer” again. A random customer is added, but the
   name is still fixed.
8. Set a breakpoint at the first line of CustomerService.createRandomCustomer(…)
   and click the button once more to stop there.
9. Inspect the field **useRandomName** (note the spelling). Its value is *false*
   even though random names are expected.
10. Locate where the Spring property **user.random.names** is defined and find
    out why it resolves to *false*.
11. Change the property so that **user.random.names** resolves to *true*, then
    restart the application.
12. Click “Add Random Customer” again. Two random customers should now be added.

===============================================================================
YOU’RE DONE